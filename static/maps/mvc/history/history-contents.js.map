{"version":3,"sources":["mvc/history/history-contents.js"],"names":["_","Backbone","limitPerPageDefault","window","localStorage","getItem","_super","CONTROLLED_FETCH_COLLECTION","PaginatedCollection","HistoryContents","extend","BASE_MVC","LoggableMixin","_logNamespace","limitPerPage","limitPerProgressiveFetch","order","url","urlRoot","historyId","initialize","models","options","on","trackJobStates","Galaxy","root","prototype","call","history","setHistoryId","includeDeleted","includeHidden","model","idAttribute","each","historyContent","has","attributes","history_content_type","jobSourceType","job_source_type","jobSourceId","job_source_id","jobStateSummariesCollection","add","id","history_id","collection_id","jobStatesSummary","get","attrs","HDA_MODEL","HistoryDatasetAssociation","HDCA_MODEL","HistoryDatasetCollection","validationError","stopPolling","active","clearUpdateTimeout","newId","_setUpWebStorage","JOB_STATES_MODEL","JobStatesSummaryCollection","monitor","initialSettings","storage","HISTORY_PREFS","HistoryPrefs","historyStorageKey","trigger","newVal","comparators","clone","name","buildComparator","ascending","hid","running","filter","c","inReadyState","runningAndActive","getByHid","findWhere","haveDetails","all","hasDetails","hidden","deleted","visibleAndUndeleted","setIncludeDeleted","setting","isBoolean","result","setIncludeHidden","fetch","details","prefs","toJSON","isEmpty","expandedIds","values","join","_buildFetchData","v","_fetchParams","concat","_buildFetchFilters","superFilters","filters","purged","visible","defaults","getTotalItemCount","contentsShown","fetchUpdated","since","remove","toISOString","fetchDeleted","undefined","always","fetchHidden","fetchAllDetails","detailsFlag","data","_filterAndUpdate","filterParams","updateWhat","updateArgs","then","fetched","reduce","modelArray","currJson","i","ajaxQueue","ajaxFn","args","collection","AJAX_QUEUE","AjaxQueue","slice","reverse","map","content","fn","isString","apply","deferred","_recursivelyFetch","detailKeys","limit","offset","_options","view","keys","reset","defer","fail","reject","done","notify","response","length","allFetched","resolve","progressivelyFetchDetails","jQuery","Deferred","searchAttributes","limitPerCall","isCopyable","contentsJSON","copyableModelClasses","isObject","contains","model_class","copy","json","type","contentType","LibraryDatasetDatasetAssociation","HistoryDatasetCollectionAssociation","xhr","ajax","method","JSON","stringify","source","parse","error","status","message","createHDCA","elementIdentifiers","collectionType","hideSourceItems","hdca","collection_type","hide_source_items","element_identifiers","save","haveSearchDetails","matches","matchesWhat","Collection","toString"],"mappings":"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","file":"../../../scripts/mvc/history/history-contents.js","sourcesContent":["import CONTROLLED_FETCH_COLLECTION from \"mvc/base/controlled-fetch-collection\";\nimport HDA_MODEL from \"mvc/history/hda-model\";\nimport HDCA_MODEL from \"mvc/history/hdca-model\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport JOB_STATES_MODEL from \"mvc/history/job-states-model\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\nimport * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\n\n/* global Galaxy */\n/* global jQuery */\n\nconst limitPerPageDefault = window.localStorage.getItem(\"historyContentsLimitPerPageDefault\") || 500;\n\n//==============================================================================\nvar _super = CONTROLLED_FETCH_COLLECTION.PaginatedCollection;\n/** @class Backbone collection for history content.\n *      NOTE: history content seems like a dataset collection, but differs in that it is mixed:\n *          each element can be either an HDA (dataset) or a DatasetCollection and co-exist on\n *          the same level.\n *      Dataset collections on the other hand are not mixed and (so far) can only contain either\n *          HDAs or child dataset collections on one level.\n *      This is why this does not inherit from any of the DatasetCollections (currently).\n */\nvar HistoryContents = _super.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: \"history\",\n\n    // ........................................................................ set up\n    limitPerPage: limitPerPageDefault,\n\n    /** @type {Integer} how many contents per call to fetch when using progressivelyFetchDetails */\n    limitPerProgressiveFetch: limitPerPageDefault,\n\n    /** @type {String} order used here and when fetching from server */\n    order: \"hid\",\n\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/${this.historyId}/contents`;\n    },\n\n    /** Set up */\n    initialize: function(models, options) {\n        this.on({\n            \"sync add\": this.trackJobStates\n        });\n\n        options = options || {};\n        this.urlRoot = `${Galaxy.root}api/histories`;\n        _super.prototype.initialize.call(this, models, options);\n\n        this.history = options.history || null;\n        this.setHistoryId(options.historyId || null);\n        /** @type {Boolean} does this collection contain and fetch deleted elements */\n        this.includeDeleted = options.includeDeleted || this.includeDeleted;\n        /** @type {Boolean} does this collection contain and fetch non-visible elements */\n        this.includeHidden = options.includeHidden || this.includeHidden;\n\n        // backbonejs uses collection.model.prototype.idAttribute to determine if a model is *already* in a collection\n        //  and either merged or replaced. In this case, our 'model' is a function so we need to add idAttribute\n        //  manually here - if we don't, contents will not merge but be replaced/swapped.\n        this.model.prototype.idAttribute = \"type_id\";\n    },\n\n    trackJobStates: function() {\n        this.each(historyContent => {\n            if (historyContent.has(\"job_states_summary\")) {\n                return;\n            }\n\n            if (historyContent.attributes.history_content_type === \"dataset_collection\") {\n                var jobSourceType = historyContent.attributes.job_source_type;\n                var jobSourceId = historyContent.attributes.job_source_id;\n                if (jobSourceType && this.jobStateSummariesCollection) {\n                    this.jobStateSummariesCollection.add({\n                        id: jobSourceId,\n                        model: jobSourceType,\n                        history_id: this.history_id,\n                        collection_id: historyContent.attributes.id\n                    });\n                    var jobStatesSummary = this.jobStateSummariesCollection.get(jobSourceId);\n                    historyContent.jobStatesSummary = jobStatesSummary;\n                }\n            }\n        });\n    },\n\n    // ........................................................................ composite collection\n    /** since history content is a mix, override model fn into a factory, creating based on history_content_type */\n    model: function(attrs, options) {\n        if (attrs.history_content_type === \"dataset\") {\n            return new HDA_MODEL.HistoryDatasetAssociation(attrs, options);\n        } else if (attrs.history_content_type === \"dataset_collection\") {\n            return new HDCA_MODEL.HistoryDatasetCollection(attrs, options);\n        } else {\n            return {\n                validationError: `Unknown history_content_type: ${attrs.history_content_type}`\n            };\n        }\n    },\n\n    stopPolling: function() {\n        if (this.jobStateSummariesCollection) {\n            this.jobStateSummariesCollection.active = false;\n            this.jobStateSummariesCollection.clearUpdateTimeout();\n        }\n    },\n\n    setHistoryId: function(newId) {\n        this.stopPolling();\n        this.historyId = newId;\n        if (newId) {\n            // If actually reflecting a history - setup storage and monitor jobs.\n\n            this._setUpWebStorage();\n\n            this.jobStateSummariesCollection = new JOB_STATES_MODEL.JobStatesSummaryCollection();\n            this.jobStateSummariesCollection.historyId = newId;\n            this.jobStateSummariesCollection.monitor();\n        }\n    },\n\n    /** Set up client side storage. Currently PersistanStorage keyed under 'history:<id>' */\n    _setUpWebStorage: function(initialSettings) {\n        // TODO: use initialSettings\n        this.storage = new HISTORY_PREFS.HistoryPrefs({\n            id: HISTORY_PREFS.HistoryPrefs.historyStorageKey(this.historyId)\n        });\n        this.trigger(\"new-storage\", this.storage, this);\n\n        this.on({\n            \"include-deleted\": function(newVal) {\n                this.storage.includeDeleted(newVal);\n            },\n            \"include-hidden\": function(newVal) {\n                this.storage.includeHidden(newVal);\n            }\n        });\n\n        this.includeDeleted = this.storage.includeDeleted() || false;\n        this.includeHidden = this.storage.includeHidden() || false;\n        return this;\n    },\n\n    // ........................................................................ common queries\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: _.extend(_.clone(_super.prototype.comparators), {\n        name: BASE_MVC.buildComparator(\"name\", { ascending: true }),\n        \"name-dsc\": BASE_MVC.buildComparator(\"name\", {\n            ascending: false\n        }),\n        hid: BASE_MVC.buildComparator(\"hid\", { ascending: false }),\n        \"hid-asc\": BASE_MVC.buildComparator(\"hid\", { ascending: true })\n    }),\n\n    /** Get every model in this collection not in a 'ready' state (running). */\n    running: function() {\n        return this.filter(c => !c.inReadyState());\n    },\n\n    /** return contents that are not ready and not deleted/hidden */\n    runningAndActive: function() {\n        return this.filter(\n            c =>\n                !c.inReadyState() &&\n                c.get(\"visible\") &&\n                // TODO: deletedOrPurged?\n                !c.get(\"deleted\")\n        );\n    },\n\n    /** Get the model with the given hid\n     *  @param {Int} hid the hid to search for\n     *  @returns {HistoryDatasetAssociation} the model with the given hid or undefined if not found\n     */\n    getByHid: function(hid) {\n        // note: there *can* be more than one content with a given hid, this finds the first based on order\n        return this.findWhere({ hid: hid });\n    },\n\n    /** return true if all contents have details */\n    haveDetails: function() {\n        return this.all(c => c.hasDetails());\n    },\n\n    // ........................................................................ hidden / deleted\n    /** return a new contents collection of only hidden items */\n    hidden: function() {\n        return this.filter(c => c.hidden());\n    },\n\n    /** return a new contents collection of only hidden items */\n    deleted: function() {\n        return this.filter(c => c.get(\"deleted\"));\n    },\n\n    /** return a new contents collection of only hidden items */\n    visibleAndUndeleted: function() {\n        return this.filter(\n            c =>\n                c.get(\"visible\") &&\n                // TODO: deletedOrPurged?\n                !c.get(\"deleted\")\n        );\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeDeleted: function(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeDeleted) {\n            this.includeDeleted = setting;\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-deleted\", setting, this);\n        }\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeHidden: function(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeHidden) {\n            this.includeHidden = setting;\n            options = options || {};\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-hidden\", setting, this);\n        }\n    },\n\n    // ........................................................................ ajax\n    // ............ controlled fetch collection\n    /** override to get expanded ids from sessionStorage and pass to API as details */\n    fetch: function(options) {\n        options = options || {};\n        if (this.historyId && !options.details) {\n            var prefs = HISTORY_PREFS.HistoryPrefs.get(this.historyId).toJSON();\n            if (!_.isEmpty(prefs.expandedIds)) {\n                options.details = _.values(prefs.expandedIds).join(\",\");\n            }\n        }\n        return _super.prototype.fetch.call(this, options);\n    },\n\n    // ............. ControlledFetch stuff\n    /** override to include the API versioning flag */\n    _buildFetchData: function(options) {\n        return _.extend(_super.prototype._buildFetchData.call(this, options), {\n            v: \"dev\"\n        });\n    },\n\n    /** Extend to include details and version */\n    _fetchParams: _super.prototype._fetchParams.concat([\n        // TODO: remove (the need for) both\n        /** version */\n        \"v\",\n        /** dataset ids to get full details of */\n        \"details\"\n    ]),\n\n    /** override to add deleted/hidden filters */\n    _buildFetchFilters: function(options) {\n        var superFilters = _super.prototype._buildFetchFilters.call(this, options) || {};\n        var filters = {};\n        if (!this.includeDeleted) {\n            filters.deleted = false;\n            filters.purged = false;\n        }\n        if (!this.includeHidden) {\n            filters.visible = true;\n        }\n        return _.defaults(superFilters, filters);\n    },\n\n    // ............ paginated collection\n    getTotalItemCount: function() {\n        return this.history.contentsShown();\n    },\n\n    // ............ history contents specific ajax\n    /** override to filter requested contents to those updated after the Date 'since' */\n    fetchUpdated: function(since, options) {\n        if (since) {\n            options = options || { filters: {} };\n            options.remove = false;\n            options.filters = {\n                \"update_time-ge\": since.toISOString(),\n                // workflows will produce hidden datasets (non-output datasets) that still\n                // need to be updated in the collection or they'll update forever\n                // we can remove the default visible filter by using an 'empty' value\n                visible: \"\"\n            };\n        }\n        return this.fetch(options);\n    },\n\n    /** fetch all the deleted==true contents of this collection */\n    fetchDeleted: function(options) {\n        options = options || {};\n        options.filters = _.extend(options.filters, {\n            // all deleted, purged or not\n            deleted: true,\n            purged: undefined\n        });\n        options.remove = false;\n\n        this.trigger(\"fetching-deleted\", this);\n        return this.fetch(options).always(() => {\n            this.trigger(\"fetching-deleted-done\", this);\n        });\n    },\n\n    /** fetch all the visible==false contents of this collection */\n    fetchHidden: function(options) {\n        options = options || {};\n        options.filters = _.extend(options.filters, {\n            visible: false\n        });\n        options.remove = false;\n\n        this.trigger(\"fetching-hidden\", this);\n        return this.fetch(options).always(() => {\n            this.trigger(\"fetching-hidden-done\", this);\n        });\n    },\n\n    /** fetch detailed model data for all contents in this collection */\n    fetchAllDetails: function(options) {\n        options = options || {};\n        var detailsFlag = { details: \"all\" };\n        options.data = _.extend(options.data || {}, detailsFlag);\n        return this.fetch(options);\n    },\n\n    // ............. quasi-batch ops\n    // TODO: to batch\n    /** helper that fetches using filterParams then calls save on each fetched using updateWhat as the save params */\n    _filterAndUpdate: function(filterParams, updateWhat) {\n        var idAttribute = this.model.prototype.idAttribute;\n        var updateArgs = [updateWhat];\n\n        return this.fetch({ filters: filterParams, remove: false }).then(fetched => {\n            // convert filtered json array to model array\n            fetched = fetched.reduce((modelArray, currJson, i) => {\n                var model = this.get(currJson[idAttribute]);\n                return model ? modelArray.concat(model) : modelArray;\n            }, []);\n            return this.ajaxQueue(\"save\", updateArgs, fetched);\n        });\n    },\n\n    /** using a queue, perform ajaxFn on each of the models in this collection */\n    ajaxQueue: function(ajaxFn, args, collection) {\n        collection = collection || this.models;\n        return new AJAX_QUEUE.AjaxQueue(\n            collection\n                .slice()\n                .reverse()\n                .map((content, i) => {\n                    var fn = _.isString(ajaxFn) ? content[ajaxFn] : ajaxFn;\n                    return () => fn.apply(content, args);\n                })\n        ).deferred;\n    },\n\n    _recursivelyFetch: function(options, detailKeys, deferred, limit, offset) {\n        offset = offset || 0;\n        var _options = _.extend(_.clone(options), {\n            view: \"summary\",\n            keys: detailKeys,\n            limit: limit,\n            offset: offset,\n            reset: offset === 0,\n            remove: false\n        });\n\n        _.defer(() => {\n            this.fetch\n                .call(this, _options)\n                .fail(deferred.reject)\n                .done(response => {\n                    deferred.notify(response, limit, offset);\n                    if (response.length !== limit) {\n                        this.allFetched = true;\n                        deferred.resolve(response, limit, offset);\n                    } else {\n                        this._recursivelyFetch(options, detailKeys, deferred, limit, offset + limit);\n                    }\n                });\n        });\n    },\n\n    /** fetch contents' details in batches of limitPerCall - note: only get searchable details here */\n    progressivelyFetchDetails: function(options) {\n        // TODO: only fetch tags and annotations if specifically requested\n        options = options || {};\n        let deferred = jQuery.Deferred();\n        this._recursivelyFetch(\n            options,\n            HDA_MODEL.HistoryDatasetAssociation.prototype.searchAttributes.join(\",\"),\n            deferred,\n            options.limitPerCall || this.limitPerProgressiveFetch\n        );\n        return deferred;\n    },\n\n    /** does some bit of JSON represent something that can be copied into this contents collection */\n    isCopyable: function(contentsJSON) {\n        var copyableModelClasses = [\"HistoryDatasetAssociation\", \"HistoryDatasetCollectionAssociation\"];\n        return (\n            _.isObject(contentsJSON) && contentsJSON.id && _.contains(copyableModelClasses, contentsJSON.model_class)\n        );\n    },\n\n    /** copy an existing, accessible hda into this collection */\n    copy: function(json) {\n        // TODO: somehow showhorn all this into 'save'\n        var id;\n\n        var type;\n        var contentType;\n        if (_.isString(json)) {\n            id = json;\n            contentType = \"hda\";\n            type = \"dataset\";\n        } else {\n            id = json.id;\n            contentType =\n                {\n                    HistoryDatasetAssociation: \"hda\",\n                    LibraryDatasetDatasetAssociation: \"ldda\",\n                    HistoryDatasetCollectionAssociation: \"hdca\"\n                }[json.model_class] || \"hda\";\n            type = contentType === \"hdca\" ? \"dataset_collection\" : \"dataset\";\n        }\n        var collection = this;\n\n        var xhr = jQuery\n            .ajax(this.url(), {\n                method: \"POST\",\n                contentType: \"application/json\",\n                data: JSON.stringify({\n                    content: id,\n                    source: contentType,\n                    type: type\n                })\n            })\n            .done(response => {\n                collection.add([response], { parse: true });\n            })\n            .fail((error, status, message) => {\n                collection.trigger(\"error\", collection, xhr, {}, \"Error copying contents\", {\n                    type: type,\n                    id: id,\n                    source: contentType\n                });\n            });\n\n        return xhr;\n    },\n\n    /** create a new HDCA in this collection */\n    createHDCA: function(elementIdentifiers, collectionType, name, hideSourceItems, options) {\n        // normally collection.create returns the new model, but we need the promise from the ajax, so we fake create\n        //precondition: elementIdentifiers is an array of plain js objects\n        //  in the proper form to create the collectionType\n        var hdca = this.model({\n            history_content_type: \"dataset_collection\",\n            collection_type: collectionType,\n            history_id: this.historyId,\n            name: name,\n            hide_source_items: hideSourceItems || false,\n            // should probably be able to just send in a bunch of json here and restruct per class\n            // note: element_identifiers is now (incorrectly) an attribute\n            element_identifiers: elementIdentifiers\n            // do not create the model on the client until the ajax returns\n        });\n        return hdca.save(options);\n    },\n\n    // ........................................................................ searching\n    /** return true if all contents have the searchable attributes */\n    haveSearchDetails: function() {\n        return (\n            this.allFetched &&\n            this.all((\n                content // null (which is a valid returned annotation value)\n            ) =>\n                // will return false when using content.has( 'annotation' )\n                //TODO: a bit hacky - formalize\n                _.has(content.attributes, \"annotation\")\n            )\n        );\n    },\n\n    /** return a new collection of contents whose attributes contain the substring matchesWhat */\n    matches: function(matchesWhat) {\n        return this.filter(content => content.matches(matchesWhat));\n    },\n\n    // ........................................................................ misc\n    /** In this override, copy the historyId to the clone */\n    clone: function() {\n        var clone = Backbone.Collection.prototype.clone.call(this);\n        clone.historyId = this.historyId;\n        return clone;\n    },\n\n    /** String representation. */\n    toString: function() {\n        return [\"HistoryContents(\", [this.historyId, this.length].join(), \")\"].join(\"\");\n    }\n});\n\n//==============================================================================\nexport default {\n    HistoryContents: HistoryContents\n};\n"]}