{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","ftpfile","upload","rules","genomespacefile","create","input_def","fieldClass","type","field","call","options","_fieldSelect","_fieldText","Galaxy","emit","debug","value","undefined","_fieldData","SelectContent","View","id","extensions","optional","multiple","flavor","onchange","is_workflow","error_text","classes","checkboxes","Ui","Checkbox","radio","Radio","radiobutton","RadioButton","SelectClass","display","Select","TextSelect","readonly","individual","searchable","textable","_fieldDrilldown","Drilldown","area","Utils","isEmpty","$","isArray","str_value","i","String","Input","placeholder","datalist","_fieldSlider","Slider","precise","min","max","_fieldHidden","Hidden","info","_fieldBoolean","label","_fieldColor","ColorPicker","_fieldLibrary","SelectLibrary","_fieldFtp","SelectFtp","_fieldGenomeSpace","SelectGenomeSpace","_fieldRulesEdit","RulesEdit","target","_fieldUpload","Upload"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAYeA,SAASC,KAAT,CAAeC,MAAf,CAAsB;AACjC;AACAC,eAAO;AACHC,kBAAM,YADH;AAEHC,sBAAU,YAFP;AAGHC,oBAAQ,cAHL;AAIHC,yBAAa,cAJV;AAKHC,yBAAa,cALV;AAMHC,kBAAM,YANH;AAOHC,6BAAiB,YAPd;AAQHC,qBAAS,cARN;AASHC,mBAAO,cATJ;AAUHC,qBAAS,eAVN;AAWHC,wBAAY,iBAXT;AAYHC,mBAAO,aAZJ;AAaHC,oBAAQ,cAbL;AAcHC,yBAAa,cAdV;AAeHC,qBAAS,cAfN;AAgBHC,0BAAc,eAhBX;AAiBHC,qBAAS,WAjBN;AAkBHC,oBAAQ,cAlBL;AAmBHC,mBAAO,iBAnBJ;AAoBHC,6BAAiB;AApBd,SAF0B;;AAyBjC;AACAC,gBAAQ,gBAASC,SAAT,EAAoB;AACxB,gBAAIC,aAAa,KAAKvB,KAAL,CAAWsB,UAAUE,IAArB,CAAjB;AACA,gBAAIC,QAAQ,OAAO,KAAKF,UAAL,CAAP,KAA4B,UAA5B,GAAyC,KAAKA,UAAL,EAAiBG,IAAjB,CAAsB,IAAtB,EAA4BJ,SAA5B,CAAzC,GAAkF,IAA9F;AACA,gBAAI,CAACG,KAAL,EAAY;AACRA,wBAAQH,UAAUK,OAAV,GAAoB,KAAKC,YAAL,CAAkBN,SAAlB,CAApB,GAAmD,KAAKO,UAAL,CAAgBP,SAAhB,CAA3D;AACAQ,uBAAOC,IAAP,CAAYC,KAAZ,CAAkB,4BAAlB,gCAA4EV,UAAUE,IAAtF;AACH;AACD,gBAAIF,UAAUW,KAAV,KAAoBC,SAAxB,EAAmC;AAC/BZ,0BAAUW,KAAV,GAAkB,IAAlB;AACH;AACDR,kBAAMQ,KAAN,CAAYX,UAAUW,KAAtB;AACA,mBAAOR,KAAP;AACH,SAtCgC;;AAwCjC;AACAU,oBAAY,oBAASb,SAAT,EAAoB;AAC5B,mBAAO,IAAIc,0BAAcC,IAAlB,CAAuB;AAC1BC,+BAAahB,UAAUgB,EADG;AAE1BC,4BAAYjB,UAAUiB,UAFI;AAG1BC,0BAAUlB,UAAUkB,QAHM;AAI1BC,0BAAUnB,UAAUmB,QAJM;AAK1BjB,sBAAMF,UAAUE,IALU;AAM1BkB,wBAAQpB,UAAUoB,MANQ;AAO1BpC,sBAAMgB,UAAUK,OAPU;AAQ1BgB,0BAAUrB,UAAUqB;AARM,aAAvB,CAAP;AAUH,SApDgC;;AAsDjC;AACAf,sBAAc,sBAASN,SAAT,EAAoB;AAC9B;AACA,gBAAIA,UAAUsB,WAAd,EAA2B;AACvB,uBAAO,KAAKf,UAAL,CAAgBP,SAAhB,CAAP;AACH;;AAED;AACA,gBAAIA,UAAUE,IAAV,IAAkB,aAAtB,EAAqC;AACjCF,0BAAUuB,UAAV,GAAuB,wCAAvB;AACH;;AAED;AACA,gBAAIC,UAAU;AACVC,4BAAYC,iBAAGC,QADL;AAEVC,uBAAOF,iBAAGG,KAFA;AAGVC,6BAAaJ,iBAAGK;AAHN,aAAd;AAKA,gBAAIC,cAAcR,QAAQxB,UAAUiC,OAAlB,KAA8BP,iBAAGQ,MAAnD;AACA,mBAAO,IAAIR,iBAAGS,UAAP,CAAkB;AACrBnB,+BAAahB,UAAUgB,EADF;AAErBhC,sBAAMgB,UAAUhB,IAFK;AAGrBqB,yBAASL,UAAUK,OAHE;AAIrB4B,yBAASjC,UAAUiC,OAJE;AAKrBV,4BAAYvB,UAAUuB,UAAV,IAAwB,sBALf;AAMrBa,0BAAUpC,UAAUoC,QANC;AAOrBjB,0BAAUnB,UAAUmB,QAPC;AAQrBD,0BAAUlB,UAAUkB,QARC;AASrBG,0BAAUrB,UAAUqB,QATC;AAUrBgB,4BAAYrC,UAAUqC,UAVD;AAWrBC,4BAAYtC,UAAUoB,MAAV,KAAqB,UAXZ;AAYrBmB,0BAAUvC,UAAUuC,QAZC;AAarBP,6BAAaA;AAbQ,aAAlB,CAAP;AAeH,SAxFgC;;AA0FjC;AACAQ,yBAAiB,yBAASxC,SAAT,EAAoB;AACjC;AACA,gBAAIA,UAAUsB,WAAd,EAA2B;AACvB,uBAAO,KAAKf,UAAL,CAAgBP,SAAhB,CAAP;AACH;;AAED;AACA,mBAAO,IAAI0B,iBAAGe,SAAH,CAAa1B,IAAjB,CAAsB;AACzBC,+BAAahB,UAAUgB,EADE;AAEzBhC,sBAAMgB,UAAUK,OAFS;AAGzB4B,yBAASjC,UAAUiC,OAHM;AAIzBf,0BAAUlB,UAAUkB,QAJK;AAKzBG,0BAAUrB,UAAUqB;AALK,aAAtB,CAAP;AAOH,SAzGgC;;AA2GjC;AACAd,oBAAY,oBAASP,SAAT,EAAoB;AAC5B;AACA,gBAAIA,UAAUK,OAAV,IAAqBL,UAAUhB,IAAnC,EAAyC;AACrCgB,0BAAU0C,IAAV,GAAiB1C,UAAUmB,QAA3B;AACA,oBAAIwB,gBAAMC,OAAN,CAAc5C,UAAUW,KAAxB,CAAJ,EAAoC;AAChCX,8BAAUW,KAAV,GAAkB,IAAlB;AACH,iBAFD,MAEO;AACH,wBAAIkC,EAAEC,OAAF,CAAU9C,UAAUW,KAApB,CAAJ,EAAgC;AAC5B,4BAAIoC,YAAY,EAAhB;AACA,6BAAK,IAAIC,CAAT,IAAchD,UAAUW,KAAxB,EAA+B;AAC3BoC,yCAAaE,OAAOjD,UAAUW,KAAV,CAAgBqC,CAAhB,CAAP,CAAb;AACA,gCAAI,CAAChD,UAAUmB,QAAf,EAAyB;AACrB;AACH;AACD4B,yCAAa,IAAb;AACH;AACD/C,kCAAUW,KAAV,GAAkBoC,SAAlB;AACH;AACJ;AACJ;AACD;AACA,mBAAO,IAAIrB,iBAAGwB,KAAP,CAAa;AAChBlC,+BAAahB,UAAUgB,EADP;AAEhBd,sBAAMF,UAAUE,IAFA;AAGhBwC,sBAAM1C,UAAU0C,IAHA;AAIhBN,0BAAUpC,UAAUoC,QAJJ;AAKhBe,6BAAanD,UAAUmD,WALP;AAMhBC,0BAAUpD,UAAUoD,QANJ;AAOhB/B,0BAAUrB,UAAUqB;AAPJ,aAAb,CAAP;AASH,SA1IgC;;AA4IjC;AACAgC,sBAAc,sBAASrD,SAAT,EAAoB;AAC9B,mBAAO,IAAI0B,iBAAG4B,MAAH,CAAUvC,IAAd,CAAmB;AACtBC,+BAAahB,UAAUgB,EADD;AAEtBuC,yBAASvD,UAAUE,IAAV,IAAkB,OAFL;AAGtBoB,6BAAatB,UAAUsB,WAHD;AAItBkC,qBAAKxD,UAAUwD,GAJO;AAKtBC,qBAAKzD,UAAUyD,GALO;AAMtBpC,0BAAUrB,UAAUqB;AANE,aAAnB,CAAP;AAQH,SAtJgC;;AAwJjC;AACAqC,sBAAc,sBAAS1D,SAAT,EAAoB;AAC9B,mBAAO,IAAI0B,iBAAGiC,MAAP,CAAc;AACjB3C,+BAAahB,UAAUgB,EADN;AAEjB4C,sBAAM5D,UAAU4D;AAFC,aAAd,CAAP;AAIH,SA9JgC;;AAgKjC;AACAC,uBAAe,uBAAS7D,SAAT,EAAoB;AAC/B,mBAAO,IAAI0B,iBAAGK,WAAH,CAAehB,IAAnB,CAAwB;AAC3BC,+BAAahB,UAAUgB,EADI;AAE3BhC,sBAAM,CAAC,EAAE8E,OAAO,KAAT,EAAgBnD,OAAO,MAAvB,EAAD,EAAkC,EAAEmD,OAAO,IAAT,EAAenD,OAAO,OAAtB,EAAlC,CAFqB;AAG3BU,0BAAUrB,UAAUqB;AAHO,aAAxB,CAAP;AAKH,SAvKgC;;AAyKjC;AACA0C,qBAAa,qBAAS/D,SAAT,EAAoB;AAC7B,mBAAO,IAAIgE,uBAAJ,CAAgB;AACnBhD,+BAAahB,UAAUgB,EADJ;AAEnBK,0BAAUrB,UAAUqB;AAFD,aAAhB,CAAP;AAIH,SA/KgC;;AAiLjC;AACA4C,uBAAe,uBAASjE,SAAT,EAAoB;AAC/B,mBAAO,IAAIkE,0BAAcnD,IAAlB,CAAuB;AAC1BC,+BAAahB,UAAUgB,EADG;AAE1BE,0BAAUlB,UAAUkB,QAFM;AAG1BC,0BAAUnB,UAAUmB,QAHM;AAI1BE,0BAAUrB,UAAUqB;AAJM,aAAvB,CAAP;AAMH,SAzLgC;;AA2LjC;AACA8C,mBAAW,mBAASnE,SAAT,EAAoB;AAC3B,mBAAO,IAAIoE,sBAAUrD,IAAd,CAAmB;AACtBC,+BAAahB,UAAUgB,EADD;AAEtBE,0BAAUlB,UAAUkB,QAFE;AAGtBC,0BAAUnB,UAAUmB,QAHE;AAItBE,0BAAUrB,UAAUqB;AAJE,aAAnB,CAAP;AAMH,SAnMgC;;AAqMjC;;AAEAgD,2BAAmB,2BAASrE,SAAT,EAAoB;AACnC,mBAAO,IAAIsE,8BAAkBvD,IAAtB,CAA2B;AAC9BC,+BAAahB,UAAUgB,EADO;AAE9BK,0BAAUrB,UAAUqB;AAFU,aAA3B,CAAP;AAIH,SA5MgC;;AA8MjCkD,yBAAiB,yBAASvE,SAAT,EAAoB;AACjC,mBAAO,IAAIwE,sBAAUzD,IAAd,CAAmB;AACtBC,+BAAahB,UAAUgB,EADD;AAEtBK,0BAAUrB,UAAUqB,QAFE;AAGtBoD,wBAAQzE,UAAUyE;AAHI,aAAnB,CAAP;AAKH,SApNgC;;AAsNjC;AACAC,sBAAc,sBAAS1E,SAAT,EAAoB;AAC9B,mBAAO,IAAI0B,iBAAGiD,MAAP,CAAc;AACjB3D,+BAAahB,UAAUgB,EADN;AAEjBK,0BAAUrB,UAAUqB;AAFH,aAAd,CAAP;AAIH;AA5NgC,KAAtB,C","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport SelectContent from \"mvc/ui/ui-select-content\";\nimport SelectLibrary from \"mvc/ui/ui-select-library\";\nimport SelectFtp from \"mvc/ui/ui-select-ftp\";\nimport SelectGenomeSpace from \"mvc/ui/ui-select-genomespace\";\nimport RulesEdit from \"mvc/ui/ui-rules-edit\";\nimport ColorPicker from \"mvc/ui/ui-color-picker\";\n// create form view\nexport default Backbone.Model.extend({\n    /** Available parameter types */\n    types: {\n        text: \"_fieldText\",\n        password: \"_fieldText\",\n        select: \"_fieldSelect\",\n        data_column: \"_fieldSelect\",\n        genomebuild: \"_fieldSelect\",\n        data: \"_fieldData\",\n        data_collection: \"_fieldData\",\n        integer: \"_fieldSlider\",\n        float: \"_fieldSlider\",\n        boolean: \"_fieldBoolean\",\n        drill_down: \"_fieldDrilldown\",\n        color: \"_fieldColor\",\n        hidden: \"_fieldHidden\",\n        hidden_data: \"_fieldHidden\",\n        baseurl: \"_fieldHidden\",\n        library_data: \"_fieldLibrary\",\n        ftpfile: \"_fieldFtp\",\n        upload: \"_fieldUpload\",\n        rules: \"_fieldRulesEdit\",\n        genomespacefile: \"_fieldGenomeSpace\"\n    },\n\n    /** Returns an input field for a given field type */\n    create: function(input_def) {\n        var fieldClass = this.types[input_def.type];\n        var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n        if (!field) {\n            field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n            Galaxy.emit.debug(\"form-parameters::_addRow()\", `Auto matched field type (${input_def.type}).`);\n        }\n        if (input_def.value === undefined) {\n            input_def.value = null;\n        }\n        field.value(input_def.value);\n        return field;\n    },\n\n    /** Data input field */\n    _fieldData: function(input_def) {\n        return new SelectContent.View({\n            id: `field-${input_def.id}`,\n            extensions: input_def.extensions,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            type: input_def.type,\n            flavor: input_def.flavor,\n            data: input_def.options,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Select/Checkbox/Radio options field */\n    _fieldSelect: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // customize properties\n        if (input_def.type == \"data_column\") {\n            input_def.error_text = \"Missing columns in referenced dataset.\";\n        }\n\n        // pick selection display\n        var classes = {\n            checkboxes: Ui.Checkbox,\n            radio: Ui.Radio,\n            radiobutton: Ui.RadioButton\n        };\n        var SelectClass = classes[input_def.display] || Ui.Select;\n        return new Ui.TextSelect({\n            id: `field-${input_def.id}`,\n            data: input_def.data,\n            options: input_def.options,\n            display: input_def.display,\n            error_text: input_def.error_text || \"No options available\",\n            readonly: input_def.readonly,\n            multiple: input_def.multiple,\n            optional: input_def.optional,\n            onchange: input_def.onchange,\n            individual: input_def.individual,\n            searchable: input_def.flavor !== \"workflow\",\n            textable: input_def.textable,\n            SelectClass: SelectClass\n        });\n    },\n\n    /** Drill down options field */\n    _fieldDrilldown: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // create drill down field\n        return new Ui.Drilldown.View({\n            id: `field-${input_def.id}`,\n            data: input_def.options,\n            display: input_def.display,\n            optional: input_def.optional,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Text input field */\n    _fieldText: function(input_def) {\n        // field replaces e.g. a select field\n        if (input_def.options && input_def.data) {\n            input_def.area = input_def.multiple;\n            if (Utils.isEmpty(input_def.value)) {\n                input_def.value = null;\n            } else {\n                if ($.isArray(input_def.value)) {\n                    var str_value = \"\";\n                    for (var i in input_def.value) {\n                        str_value += String(input_def.value[i]);\n                        if (!input_def.multiple) {\n                            break;\n                        }\n                        str_value += \"\\n\";\n                    }\n                    input_def.value = str_value;\n                }\n            }\n        }\n        // create input element\n        return new Ui.Input({\n            id: `field-${input_def.id}`,\n            type: input_def.type,\n            area: input_def.area,\n            readonly: input_def.readonly,\n            placeholder: input_def.placeholder,\n            datalist: input_def.datalist,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Slider field */\n    _fieldSlider: function(input_def) {\n        return new Ui.Slider.View({\n            id: `field-${input_def.id}`,\n            precise: input_def.type == \"float\",\n            is_workflow: input_def.is_workflow,\n            min: input_def.min,\n            max: input_def.max,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Hidden field */\n    _fieldHidden: function(input_def) {\n        return new Ui.Hidden({\n            id: `field-${input_def.id}`,\n            info: input_def.info\n        });\n    },\n\n    /** Boolean field */\n    _fieldBoolean: function(input_def) {\n        return new Ui.RadioButton.View({\n            id: `field-${input_def.id}`,\n            data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Color picker field */\n    _fieldColor: function(input_def) {\n        return new ColorPicker({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Library dataset field */\n    _fieldLibrary: function(input_def) {\n        return new SelectLibrary.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** FTP file field */\n    _fieldFtp: function(input_def) {\n        return new SelectFtp.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** GenomeSpace file select field\n     */\n    _fieldGenomeSpace: function(input_def) {\n        return new SelectGenomeSpace.View({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    _fieldRulesEdit: function(input_def) {\n        return new RulesEdit.View({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange,\n            target: input_def.target\n        });\n    },\n\n    /** Upload file field */\n    _fieldUpload: function(input_def) {\n        return new Ui.Upload({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    }\n});\n"]}