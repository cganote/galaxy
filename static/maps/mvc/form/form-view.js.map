{"version":3,"sources":["mvc/form/form-view.js"],"names":["Backbone","View","extend","initialize","options","model","Model","initial_errors","cls","icon","always_refresh","status","hide_operations","onchange","set","setElement","render","update","new_model","self","data","matchModel","node","input_id","field","field_list","trigger","Galaxy","emit","debug","wait","active","i","input_list","input","is_dynamic","unwait","highlight","message","silent","input_element","element_list","error","portlet","expand","$panel","$el","parents","filter","indexOf","$","css","first","animate","scrollTop","offset","top","position","errors","error_messages","matchResponse","off","FormData","Manager","_renderForm","create","get","attributes","current_check","checksum","on","refresh_on_change","new_check","_","each","reset","remove","Ui","UnescapedMessage","section","FormSection","inputs","Portlet","title","title_id","operations","buttons","collapsible","collapsed","onchange_title","append","empty","persistent"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport FormSection from \"mvc/form/form-section\";\nimport FormData from \"mvc/form/form-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.model = new Backbone.Model({\n            initial_errors: false,\n            cls: \"ui-portlet-limited\",\n            icon: null,\n            always_refresh: true,\n            status: \"warning\",\n            hide_operations: false,\n            onchange: function() {}\n        }).set(options);\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Update available options */\n    update: function(new_model) {\n        var self = this;\n        this.data.matchModel(new_model, (node, input_id) => {\n            var field = self.field_list[input_id];\n            if (field.update) {\n                field.update(node);\n                field.trigger(\"change\");\n                Galaxy.emit.debug(\"form-view::update()\", `Updating input: ${input_id}`);\n            }\n        });\n    },\n\n    /** Set form into wait mode */\n    wait: function(active) {\n        for (var i in this.input_list) {\n            var field = this.field_list[i];\n            var input = this.input_list[i];\n            if (input.is_dynamic && field.wait && field.unwait) {\n                field[active ? \"wait\" : \"unwait\"]();\n            }\n        }\n    },\n\n    /** Highlight and scroll to input element (currently only used for error notifications) */\n    highlight: function(input_id, message, silent) {\n        var input_element = this.element_list[input_id];\n        if (input_element) {\n            input_element.error(message || \"Please verify this parameter.\");\n            this.portlet.expand();\n            this.trigger(\"expand\", input_id);\n            if (!silent) {\n                var $panel = this.$el\n                    .parents()\n                    .filter(function() {\n                        return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                    })\n                    .first();\n                $panel.animate(\n                    {\n                        scrollTop: $panel.scrollTop() + input_element.$el.offset().top - $panel.position().top - 120\n                    },\n                    500\n                );\n            }\n        }\n    },\n\n    /** Highlights errors */\n    errors: function(options) {\n        this.trigger(\"reset\");\n        if (options && options.errors) {\n            var error_messages = this.data.matchResponse(options.errors);\n            for (var input_id in this.element_list) {\n                if (error_messages[input_id]) {\n                    this.highlight(input_id, error_messages[input_id], true);\n                }\n            }\n        }\n    },\n\n    /** Render tool form */\n    render: function() {\n        var self = this;\n        this.off(\"change\");\n        this.off(\"reset\");\n        // contains the dom field elements as created by the parameter factory i.e. form-parameters\n        this.field_list = {};\n        // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n        this.input_list = {};\n        // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n        this.element_list = {};\n        // converts the form into a json data structure\n        this.data = new FormData.Manager(this);\n        this._renderForm();\n        this.data.create();\n        if (this.model.get(\"initial_errors\")) {\n            this.errors(this.model.attributes);\n        }\n        // add listener which triggers on checksum change, and reset the form input wrappers\n        var current_check = this.data.checksum();\n        this.on(\"change\", input_id => {\n            var input = self.input_list[input_id];\n            if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                var new_check = self.data.checksum();\n                if (new_check != current_check) {\n                    current_check = new_check;\n                    self.model.get(\"onchange\")();\n                }\n            }\n        });\n        this.on(\"reset\", () => {\n            _.each(self.element_list, input_element => {\n                input_element.reset();\n            });\n        });\n        return this;\n    },\n\n    /** Renders/appends dom elements of the form */\n    _renderForm: function() {\n        $(\".tooltip\").remove();\n        var options = this.model.attributes;\n        this.message = new Ui.UnescapedMessage();\n        this.section = new FormSection.View(this, {\n            inputs: options.inputs\n        });\n        this.portlet = new Portlet.View({\n            icon: options.icon,\n            title: options.title,\n            title_id: options.title_id,\n            cls: options.cls,\n            operations: !options.hide_operations && options.operations,\n            buttons: options.buttons,\n            collapsible: options.collapsible,\n            collapsed: options.collapsed,\n            onchange_title: options.onchange_title\n        });\n        this.portlet.append(this.message.$el);\n        this.portlet.append(this.section.$el);\n        this.$el.empty();\n        if (options.inputs) {\n            this.$el.append(this.portlet.$el);\n        }\n        if (options.message) {\n            this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n        }\n        Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n    }\n});\n"]}