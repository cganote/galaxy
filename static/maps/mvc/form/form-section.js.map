{"version":3,"sources":["mvc/form/form-section.js"],"names":["View","Backbone","extend","initialize","app","options","inputs","parameters","Parameters","setElement","$","render","self","$el","empty","_","each","add","input","input_def","jQuery","id","Utils","uid","input_list","type","_addConditional","_addRepeat","_addSection","_addRow","test_param","textable","model","get","disabled","field","i","cases","sub_section","_append","addClass","set","selectedCase","data","matchCase","value","case_def","section_row","nonhidden","j","hidden","fadeIn","hide","trigger","block_index","repeat","Repeat","title","min","max","onnew","create","sub_section_id","ondel","del","n_cache","size","cache","Math","default","hideOptions","input_element","InputElement","label","name","help","portlet","Portlet","cls","collapsible","collapsible_button","collapsed","expanded","append","html","on","input_id","length","expand","onchange","field_list","hide_label","text_value","collapsible_value","collapsible_preview","argument","color","style","backdrop","fixed","element_list","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport InputElement from \"mvc/form/form-input\";\nimport Parameters from \"mvc/form/form-parameters\";\nvar View = Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.inputs = options.inputs;\n        this.parameters = new Parameters();\n        this.setElement($(\"<div/>\"));\n        this.render();\n    },\n\n    /** Render section view */\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        _.each(this.inputs, input => {\n            self.add(input);\n        });\n    },\n\n    /** Add a new input element */\n    add: function(input) {\n        var input_def = jQuery.extend({}, input);\n        input_def.id = Utils.uid();\n        this.app.input_list[input_def.id] = input_def;\n        switch (input_def.type) {\n            case \"conditional\":\n                this._addConditional(input_def);\n                break;\n            case \"repeat\":\n                this._addRepeat(input_def);\n                break;\n            case \"section\":\n                this._addSection(input_def);\n                break;\n            default:\n                this._addRow(input_def);\n        }\n    },\n\n    /** Add a conditional block */\n    _addConditional: function(input_def) {\n        var self = this;\n        input_def.test_param.id = input_def.id;\n        input_def.test_param.textable = false;\n        this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n        var field = this._addRow(input_def.test_param);\n        // set onchange event for test parameter\n        if (field.model) {\n            // add conditional sub sections\n            for (var i in input_def.cases) {\n                var sub_section = new View(this.app, {\n                    inputs: input_def.cases[i].inputs\n                });\n                this._append(sub_section.$el.addClass(\"ui-form-section\"), `${input_def.id}-section-${i}`);\n            }\n            field.model.set(\"onchange\", value => {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(`#${input_def.id}-section-${i}`);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger(\"change\");\n        }\n    },\n\n    /** Add a repeat block */\n    _addRepeat: function(input_def) {\n        var self = this;\n        var block_index = 0;\n\n        // create repeat block element\n        var repeat = new Repeat.View({\n            title: input_def.title || \"Repeat\",\n            min: input_def.min,\n            max: input_def.max,\n            onnew: function() {\n                create(input_def.inputs);\n                self.app.trigger(\"change\");\n            }\n        });\n\n        // helper function to create new repeat blocks\n        function create(inputs) {\n            var sub_section_id = `${input_def.id}-section-${block_index++}`;\n            var sub_section = new View(self.app, { inputs: inputs });\n            repeat.add({\n                id: sub_section_id,\n                $el: sub_section.$el,\n                ondel: function() {\n                    repeat.del(sub_section_id);\n                    self.app.trigger(\"change\");\n                }\n            });\n        }\n\n        //\n        // add parsed/minimum number of repeat blocks\n        //\n        var n_cache = _.size(input_def.cache);\n        for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n            create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n        }\n\n        // hide options\n        this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n        // create input field wrapper\n        var input_element = new InputElement(this.app, {\n            label: input_def.title || input_def.name,\n            help: input_def.help,\n            field: repeat\n        });\n        this._append(input_element.$el, input_def.id);\n    },\n\n    /** Add a customized section */\n    _addSection: function(input_def) {\n        var portlet = new Portlet.View({\n            title: input_def.title || input_def.name,\n            cls: \"ui-portlet-section\",\n            collapsible: true,\n            collapsible_button: true,\n            collapsed: !input_def.expanded\n        });\n        portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n        portlet.append(\n            $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .html(input_def.help)\n        );\n        this.app.on(\"expand\", input_id => {\n            portlet.$(`#${input_id}`).length > 0 && portlet.expand();\n        });\n        this._append(portlet.$el, input_def.id);\n    },\n\n    /** Add a single input field element */\n    _addRow: function(input_def) {\n        var self = this;\n        var id = input_def.id;\n        input_def.onchange =\n            input_def.onchange ||\n            (() => {\n                self.app.trigger(\"change\", id);\n            });\n        var field = this.parameters.create(input_def);\n        this.app.field_list[id] = field;\n        var input_element = new InputElement(this.app, {\n            name: input_def.name,\n            label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n            value: input_def.value,\n            text_value: input_def.text_value,\n            collapsible_value: input_def.collapsible_value,\n            collapsible_preview: input_def.collapsible_preview,\n            help: input_def.help,\n            argument: input_def.argument,\n            disabled: input_def.disabled,\n            color: input_def.color,\n            style: input_def.style,\n            backdrop: input_def.backdrop,\n            hidden: input_def.hidden,\n            fixed: input_def.fixed,\n            field: field\n        });\n        this.app.element_list[id] = input_element;\n        this._append(input_element.$el, input_def.id);\n        return field;\n    },\n\n    /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n    _append: function($el, id) {\n        this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}