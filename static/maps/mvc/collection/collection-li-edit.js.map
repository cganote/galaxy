{"version":3,"sources":["mvc/collection/collection-li-edit.js"],"names":["DCListItemView","DC_LI","DCListItemEdit","extend","initialize","attributes","prototype","call","toString","modelString","model","DCEListItemView","DCEListItemEdit","DatasetDCEListItemEdit","DATASET_LI_EDIT","DatasetListItemEdit","_fetchModelDetails","view","inReadyState","hasDetails","fetch","silent","jQuery","when","_renderDeleteButton","templates","_","titleBar","DatasetDCEListItemView","NestedDCDCEListItemEdit","NestedDCDCEListItemView"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAKA;AACA,QAAIA,iBAAiBC,uBAAMD,cAA3B;AACA;;AAEA,QAAIE,iBAAiBF,eAAeG,MAAf;AACjB,0CAAuC;AACnC;AACAC,oBAAY,oBAASC,UAAT,EAAqB;AAC7BL,2BAAeM,SAAf,CAAyBF,UAAzB,CAAoCG,IAApC,CAAyC,IAAzC,EAA+CF,UAA/C;AACH,SAJkC;;AAMnC;AACA;AACAG,kBAAU,oBAAW;AACjB,gBAAIC,cAAc,KAAKC,KAAL,QAAgB,KAAKA,KAArB,GAA+B,YAAjD;AACA,uCAAyBD,WAAzB;AACH;AAXkC,KADtB,CAArB;;AAgBA;AACA,QAAIE,kBAAkBV,uBAAMU,eAA5B;AACA;;AAEA,QAAIC,kBAAkBD,gBAAgBR,MAAhB;AAClB,2CAAwC;AACpC;;AAEA;AACAC,oBAAY,oBAASC,UAAT,EAAqB;AAC7BM,4BAAgBL,SAAhB,CAA0BF,UAA1B,CAAqCG,IAArC,CAA0C,IAA1C,EAAgDF,UAAhD;AACH,SANmC;;AAQpC;AACA;AACAG,kBAAU,oBAAW;AACjB,gBAAIC,cAAc,KAAKC,KAAL,QAAgB,KAAKA,KAArB,GAA+B,YAAjD;AACA,wCAA0BD,WAA1B;AACH;AAbmC,KADtB,CAAtB;;AAkBA;AACA;AACA;AACA;;;AAGA,QAAII,yBAAyBC,wBAAgBC,mBAAhB,CAAoCZ,MAApC;AACzB,kDAA+C;AAC3C;AACAC,oBAAY,oBAASC,UAAT,EAAqB;AAC7BS,oCAAgBC,mBAAhB,CAAoCT,SAApC,CAA8CF,UAA9C,CAAyDG,IAAzD,CAA8D,IAA9D,EAAoEF,UAApE;AACH,SAJ0C;;AAM3C;AACA;AACA;;;AAGAW,4BAAoB,8BAAW;AAC3B,gBAAIC,OAAO,IAAX;AACA,gBAAIA,KAAKP,KAAL,CAAWQ,YAAX,MAA6B,CAACD,KAAKP,KAAL,CAAWS,UAAX,EAAlC,EAA2D;AACvD,uBAAOF,KAAKP,KAAL,CAAWU,KAAX,CAAiB,EAAEC,QAAQ,IAAV,EAAjB,CAAP;AACH;AACD,mBAAOC,OAAOC,IAAP,EAAP;AACH,SAjB0C;;AAmB3C;AACAC,6BAAqB,+BAAW;AAC5B,mBAAO,IAAP;AACH,SAtB0C;;AAwB3C;AACA;AACAhB,kBAAU,oBAAW;AACjB,gBAAIC,cAAc,KAAKC,KAAL,QAAgB,KAAKA,KAArB,GAA+B,YAAjD;AACA,+CAAiCD,WAAjC;AACH;AA7B0C,KADtB,CAA7B;;AAkCA;AACA;AACAI,2BAAuBP,SAAvB,CAAiCmB,SAAjC,GAA8C;AAAA,eAC1CC,EAAEvB,MAAF,CAAS,EAAT,EAAaW,wBAAgBC,mBAAhB,CAAoCT,SAApC,CAA8CmB,SAA3D,EAAsE;AAClEE,sBAAU1B,uBAAM2B,sBAAN,CAA6BtB,SAA7B,CAAuCmB,SAAvC,CAAiDE;AADO,SAAtE,CAD0C;AAAA,KAAD,EAA7C;;AAKA;AACA;;;AAGA,QAAIE,0BAA0B5B,uBAAM6B,uBAAN,CAA8B3B,MAA9B;AAC1B,mDAAgD;AAC5C;AACAK,kBAAU,oBAAW;AACjB,gBAAIC,cAAc,KAAKC,KAAL,QAAgB,KAAKA,KAArB,GAA+B,YAAjD;AACA,gDAAkCD,WAAlC;AACH;AAL2C,KADtB,CAA9B;;AAUA;sBACe;AACXP,wBAAgBA,cADL;AAEXU,yBAAiBA,eAFN;AAGXC,gCAAwBA,sBAHb;AAIXgB,iCAAyBA;AAJd,K","file":"../../../scripts/mvc/collection/collection-li-edit.js","sourcesContent":["import DC_LI from \"mvc/collection/collection-li\";\nimport DATASET_LI_EDIT from \"mvc/dataset/dataset-li-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar DCListItemView = DC_LI.DCListItemView;\n/** @class Edit view for DatasetCollection.\n */\nvar DCListItemEdit = DCListItemView.extend(\n    /** @lends DCListItemEdit.prototype */ {\n        /** override to add linkTarget */\n        initialize: function(attributes) {\n            DCListItemView.prototype.initialize.call(this, attributes);\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DCListItemEdit(${modelString})`;\n        }\n    }\n);\n\n//==============================================================================\nvar DCEListItemView = DC_LI.DCEListItemView;\n/** @class Read only view for DatasetCollectionElement.\n */\nvar DCEListItemEdit = DCEListItemView.extend(\n    /** @lends DCEListItemEdit.prototype */ {\n        //TODO: this might be expendable - compacted with HDAListItemView\n\n        /** set up */\n        initialize: function(attributes) {\n            DCEListItemView.prototype.initialize.call(this, attributes);\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DCEListItemEdit(${modelString})`;\n        }\n    }\n);\n\n//==============================================================================\n// NOTE: this does not inherit from DatasetDCEListItemView as you would expect\n//TODO: but should - if we can find something simpler than using diamond\n/** @class Editable view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\nvar DatasetDCEListItemEdit = DATASET_LI_EDIT.DatasetListItemEdit.extend(\n    /** @lends DatasetDCEListItemEdit.prototype */ {\n        /** set up */\n        initialize: function(attributes) {\n            DATASET_LI_EDIT.DatasetListItemEdit.prototype.initialize.call(this, attributes);\n        },\n\n        // NOTE: this does not inherit from DatasetDCEListItemView - so we duplicate this here\n        //TODO: fix\n        /** In this override, only get details if in the ready state.\n         *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n         */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n            }\n            return jQuery.when();\n        },\n\n        /** Override to remove delete button */\n        _renderDeleteButton: function() {\n            return null;\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DatasetDCEListItemEdit(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetDCEListItemEdit.prototype.templates = (() =>\n    _.extend({}, DATASET_LI_EDIT.DatasetListItemEdit.prototype.templates, {\n        titleBar: DC_LI.DatasetDCEListItemView.prototype.templates.titleBar\n    }))();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\nvar NestedDCDCEListItemEdit = DC_LI.NestedDCDCEListItemView.extend(\n    /** @lends NestedDCDCEListItemEdit.prototype */ {\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `NestedDCDCEListItemEdit(${modelString})`;\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    DCListItemEdit: DCListItemEdit,\n    DCEListItemEdit: DCEListItemEdit,\n    DatasetDCEListItemEdit: DatasetDCEListItemEdit,\n    NestedDCDCEListItemEdit: NestedDCDCEListItemEdit\n};\n"]}