{"version":3,"sources":["viz/phyloviz.js"],"names":["d3","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","max","value","val","fieldName","attr","replace","isNumeric","n","isNaN","parseFloat","isFinite","alert","hasIllegalJsonCharacters","search","PhyloTreeLayout","self","hierarchy","layout","sort","height","layoutMode","leafHeight","depthSeparation","leafIndex","defaultDist","maxTextWidth","inputLeafHeight","mode","layoutAngle","angle","separation","dist","links","nodes","tree","d","i","toString","call","_nodes","maxDepth","numLeaves","window","_d","forEach","node","depth","push","children","vertSeparation","parent","sumChildVertSeparation","y0","x0","child","length","x","y","PhyloTree","visualization_mod","Visualization","defaults","type","title","scaleFactor","translate","fontSize","selectedNode","nodeAttrChangedTime","initialize","options","set","data_mod","Dataset","id","dataset_id","root","toggle","_children","toggleAll","getData","save","cleanTree","_selected","config","jQuery","attributes","show_message","$","ajax","url","dataType","data","JSON","stringify","success","res","hide_modal","PhylovizLayoutBase","nodeRadius","stdInit","model","on","updateAndRender","vis","width","source","select","renderNodes","renderLinks","addTooltips","diagonal","duration","link","selectAll","target","calcalateLinePos","pos0","pos1","pos2","linkEnter","enter","insert","append","linkUpdate","transition","linkExit","exit","remove","selectNode","classed","name","annotation","__data__","bootstrap","Math","round","tooltip","placement","trigger","PhylovizLinearView","margins","svg","projection","get","nodeEnter","event","stopPropagation","altKey","style","nodeUpdate","text","nodeExit","PhylovizView","MIN_SCALE","MAX_SCALE","MAX_DISPLACEMENT","radius","resize","render","phyloTree","zoomFunc","behavior","zoom","scaleExtent","scale","navMenu","HeaderButtons","settingsMenu","SettingsMenu","nodeSelectionView","NodeSelectionView","PhyloVizSearch","setTimeout","zoomAndPan","empty","mainSVG","boundingRect","layoutOptions","linearView","zoomParams","translateParams","translationCoor","zoomStatement","translateStatement","split","reloadViz","treeIndex","getJSON","tree_index","data_type","packedJson","phylovizView","off","initNavBtns","initRightHeaderBtns","rightMenu","mod_icon_btn","create_icon_buttons_menu","icon_class","on_click","show","updateUI","nexSelected","open","tooltip_config","$el","el","inputs","hide","resetToDefaults","apply","each","key","$input","UI","enableEdit","saveChanges","cancelChanges","valuesOfConcern","updateNodes","fn","enable","isEnabled","removeAttr","toggleUI","checked","is","Date","searchTerm","searchConditionVal","condition","searchTree","attrVal","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as d3 from \"libs/d3\";\nimport visualization_mod from \"viz/visualization\";\nimport data_mod from \"mvc/dataset/data\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n    className: \"UserMenuBase\",\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue: function($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val();\n\n        var fieldName = $inputKey.attr(\"displayLabel\") || $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)) {\n            alert(`${fieldName} is not a number!`);\n            return false;\n        }\n\n        if (value > max) {\n            alert(`${fieldName} is too large.`);\n            return false;\n        } else if (value < min) {\n            alert(`${fieldName} is too small.`);\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters: function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n            alert(\n                \"Named fields cannot contain these illegal characters: \" +\n                    \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n            );\n            return true;\n        }\n        return false;\n    }\n});\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n    var self = this; // maximum length of the text labels\n\n    var hierarchy = d3.layout\n        .hierarchy()\n        .sort(null)\n        .value(null);\n\n    var // ! represents both the layout angle and the height of the layout, in px\n    height = 360;\n\n    var layoutMode = \"Linear\";\n\n    var // height of each individual leaf node\n    leafHeight = 18;\n\n    var // separation between nodes of different depth, in px\n    depthSeparation = 200;\n\n    var // change to recurssive call\n    leafIndex = 0;\n\n    var // tree defaults to 0.5 dist if no dist is specified\n    defaultDist = 0.5;\n\n    var maxTextWidth = 50;\n\n    self.leafHeight = inputLeafHeight => {\n        if (typeof inputLeafHeight === \"undefined\") {\n            return leafHeight;\n        } else {\n            leafHeight = inputLeafHeight;\n            return self;\n        }\n    };\n\n    self.layoutMode = mode => {\n        if (typeof mode === \"undefined\") {\n            return layoutMode;\n        } else {\n            layoutMode = mode;\n            return self;\n        }\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = angle => {\n        if (typeof angle === \"undefined\") {\n            return height;\n        }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) {\n            return self;\n        } else {\n            height = angle;\n            return self;\n        }\n    };\n\n    self.separation = dist => {\n        // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\") {\n            return depthSeparation;\n        } else {\n            depthSeparation = dist;\n            return self;\n        }\n    };\n\n    self.links = (\n        nodes // uses d3 native method to generate links. Done.\n    ) => d3.layout.tree().links(nodes);\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = (d, i) => {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(d) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i);\n\n        var nodes = [];\n        var maxDepth = 0;\n        var numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(node => {\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(node => {\n            if (!node.children) {\n                //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight = layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout(node, maxDepth, vertSeparation, parent) {\n        var children = node.children;\n        var sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null) {\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {\n            //root node\n            node.y0 = maxTextWidth;\n        }\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach(child => {\n                child.parent = node;\n                sumChildVertSeparation += layout(child, maxDepth, vertSeparation, node);\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults: {\n        layout: \"Linear\",\n        separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type: \"phyloviz\", // visualization type\n        title: _l(\"Title\"),\n        scaleFactor: 1,\n        translate: [0, 0],\n        fontSize: 12, //fontSize of node label\n        selectedNode: null,\n        nodeAttrChangedTime: 0\n    },\n\n    initialize: function(options) {\n        this.set(\n            \"dataset\",\n            new data_mod.Dataset({\n                id: options.dataset_id\n            })\n        );\n    },\n\n    root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle: function(d) {\n        if (typeof d === \"undefined\") {\n            return;\n        }\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll: function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData: function() {\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node) {\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected) {\n                delete node._selected;\n            }\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                config: JSON.stringify(config),\n                type: \"phyloviz\"\n            },\n            success: function(res) {\n                hide_modal();\n            }\n        });\n    }\n});\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase = Backbone.View.extend({\n    defaults: {\n        nodeRadius: 4.5 // radius of each node in the diagram\n    },\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit: function(options) {\n        var self = this;\n        self.model.on(\n            \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender,\n            self\n        );\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender: function(source) {\n        var vis = d3.select(\".vis\");\n        var self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks: function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis.selectAll(\"g.completeLink\").data(self.tree.links(self.nodes), d => d.target.id);\n\n        var calcalateLinePos = d => {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = `${d.source.y0} ${d.source.x0}`;\n            // position where the line makes a right angle bend\n            d.pos1 = `${d.source.y0} ${d.target.x0}`;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = `${d.target.y0} ${d.target.x0}`;\n        };\n\n        var linkEnter = link\n            .enter()\n            .insert(\"svg:g\", \"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter\n            .append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", d => {\n                calcalateLinePos(d);\n                return `M ${d.pos0} L ${d.pos1}`;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\").attr(\"d\", d => {\n            calcalateLinePos(d);\n            return `M ${d.pos0} L ${d.pos1} L ${d.pos2}`;\n        });\n\n        var linkExit = link.exit().remove();\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode: function(node) {\n        var self = this;\n        d3.selectAll(\"g.node\").classed(\"selectedHighlight\", d => {\n            if (node.id === d.id) {\n                if (node._selected) {\n                    // for de=selecting node.\n                    delete node._selected;\n                    return false;\n                } else {\n                    node._selected = true;\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips: function() {\n        $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function() {\n                var d = this.__data__;\n                var annotation = d.annotation || \"None\";\n                return d\n                    ? `${d.name ? `${d.name}<br/>` : \"\"}Dist: ${d.dist} <br/>Annotation1: ${annotation}${\n                          d.bootstrap ? `<br/>Confidence level: ${Math.round(100 * d.bootstrap)}` : \"\"\n                      }`\n                    : \"\";\n            })\n            .tooltip({ placement: \"top\", trigger: \"hover\" });\n    }\n});\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView = PhylovizLayoutBase.extend({\n    initialize: function(options) {\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout: function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes: function(source) {\n        var self = this;\n        var fontSize = `${self.model.get(\"fontSize\")}px`;\n\n        // assigning properties from models\n        self.tree.separation(self.model.get(\"separation\")).leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500;\n\n        var nodes = self.tree.separation(self.model.get(\"separation\")).nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\").data(nodes, d => d.name + d.id || (d.id = ++self.i));\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n            .enter()\n            .append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", () => {\n                d3.event.stopPropagation();\n            })\n            .on(\"click\", d => {\n                if (d3.event.altKey) {\n                    self.selectNode(d); // display info if alt is pressed\n                } else {\n                    if (d.children && d.children.length === 0) {\n                        return;\n                    } // there is no need to toggle leaves\n                    self.model.toggle(d); // contract/expand nodes at data level\n                    self.updateAndRender(d); // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(source) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", d => `translate(${source.y0},${source.x0})`);\n\n        nodeEnter\n            .append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeEnter\n            .append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", d => (d.children || d._children ? -10 : 10))\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", d => (d.children || d._children ? \"end\" : \"start\"))\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration);\n\n        nodeUpdate.attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n        nodeUpdate\n            .select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeUpdate\n            .select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(d => (d.name && d.name !== \"\" ? d.name : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\"));\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n            .exit()\n            .transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(d => {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n});\n\nvar PhylovizView = Backbone.View.extend({\n    className: \"phyloviz\",\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(() => {\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior.zoom().scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({\n            phyloTree: self.phyloTree\n        });\n        self.nodeSelectionView = new NodeSelectionView({\n            phyloTree: self.phyloTree\n        });\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(() => {\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function() {\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3\n            .select(\"#PhyloViz\")\n            .append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(\n                self.zoomFunc.on(\"zoom\", () => {\n                    self.zoomAndPan();\n                })\n            );\n\n        self.boundingRect = self.mainSVG\n            .append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model: self.phyloTree,\n            width: self.width,\n            height: self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(`Phylogenetic Tree from ${self.phyloTree.get(\"title\")}:`);\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan: function(event) {\n        var zoomParams;\n        var translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this;\n        var scaleFactor = self.zoomFunc.scale();\n        var translationCoor = self.zoomFunc.translate();\n        var zoomStatement = \"\";\n        var translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0, 0];\n                break;\n            case \"+\":\n                scaleFactor *= 1.1;\n                break;\n            case \"-\":\n                scaleFactor *= 0.9;\n                break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n            return;\n        }\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement = `translate(${self.margins[3]},${self.margins[0]}) scale(${scaleFactor})`;\n\n        // Do manual translation.\n        if (d3.event !== null) {\n            translateStatement = `translate(${d3.event.translate})`;\n        } else {\n            if (typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)) {\n                    translationCoor = [translationCoor[0] + parseFloat(x), translationCoor[1] + parseFloat(y)];\n                }\n            }\n            self.zoomFunc.translate(translationCoor); // update zoomFunc\n            translateStatement = `translate(${translationCoor})`;\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz: function() {\n        var self = this;\n        var treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(\n            self.phyloTree.get(\"dataset\").url(),\n            {\n                tree_index: treeIndex,\n                data_type: \"raw_data\"\n            },\n            packedJson => {\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            }\n        );\n    }\n});\n\nvar HeaderButtons = Backbone.View.extend({\n    initialize: function(phylovizView) {\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\")\n            .off()\n            .on(\"change\", () => {\n                self.phylovizView.reloadViz();\n            });\n    },\n\n    initRightHeaderBtns: function() {\n        var self = this;\n\n        var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"gear\",\n                    title: _l(\"PhyloViz Settings\"),\n                    on_click: function() {\n                        $(\"#SettingsMenu\").show();\n                        self.settingsMenu.updateUI();\n                    }\n                },\n                {\n                    icon_class: \"disk\",\n                    title: _l(\"Save visualization\"),\n                    on_click: function() {\n                        var nexSelected = $(\"#phylovizNexSelector option:selected\").text();\n                        if (nexSelected) {\n                            self.phylovizView.phyloTree.set(\"title\", nexSelected);\n                        }\n                        self.phylovizView.phyloTree.save();\n                    }\n                },\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Search / Edit Nodes\",\n                    on_click: function() {\n                        $(\"#nodeSelectionView\").show();\n                    }\n                },\n                {\n                    icon_class: \"information\",\n                    title: _l(\"Phyloviz Help\"),\n                    on_click: function() {\n                        window.open(\"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\");\n                        // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this;\n\n        var navMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"zoom-in\",\n                    title: _l(\"Zoom in\"),\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                    }\n                },\n                {\n                    icon_class: \"zoom-out\",\n                    title: _l(\"Zoom out\"),\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                    }\n                },\n                {\n                    icon_class: \"arrow-circle\",\n                    title: \"Reset Zoom/Pan\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({\n                            zoom: \"reset\"\n                        });\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\nvar SettingsMenu = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation: $(\"#phyloVizTreeSeparation\"),\n            leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n            fontSize: $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        $(\"#phylovizResetSettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.resetToDefaults();\n            });\n        $(\"#phylovizApplySettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.apply();\n            });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply: function() {\n        var self = this;\n        if (\n            !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n        ) {\n            return;\n        }\n        $.each(self.inputs, (key, $input) => {\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI: function() {\n        var self = this;\n        $.each(self.inputs, (key, $input) => {\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults: function() {\n        $(\".tooltip\").remove(); // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, (key, value) => {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function() {}\n});\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit: $(\"#phylovizEditNodesCheck\"),\n            saveChanges: $(\"#phylovizNodeSaveChanges\"),\n            cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n            name: $(\"#phyloVizSelectedNodeName\"),\n            dist: $(\"#phyloVizSelectedNodeDist\"),\n            annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name: null,\n            dist: null,\n            annotation: null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        self.UI.saveChanges.off().on(\"click\", () => {\n            self.updateNodes();\n        });\n        self.UI.cancelChanges.off().on(\"click\", () => {\n            self.cancelChanges();\n        });\n\n        ($ => {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function(isEnabled) {\n                return $(this).each(function() {\n                    if (isEnabled) {\n                        $(this).removeAttr(\"disabled\");\n                    } else {\n                        $(this).attr(\"disabled\", \"disabled\");\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", () => {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI: function() {\n        var self = this;\n        var checked = self.UI.enableEdit.is(\":checked\");\n\n        if (!checked) {\n            self.cancelChanges();\n        }\n\n        $.each(self.valuesOfConcern, (key, value) => {\n            self.UI[key].enable(checked);\n        });\n        if (checked) {\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            $.each(self.valuesOfConcern, (key, value) => {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            if (\n                !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation)\n            ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, (key, value) => {\n                node[key] = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize: function() {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", () => {\n            var searchTerm = $(\"#phyloVizSearchTerm\");\n\n            var searchConditionVal = $(\"#phyloVizSearchCondition\")\n                .val()\n                .split(\"-\");\n\n            var attr = searchConditionVal[0];\n            var condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\") {\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree: function(attr, condition, val) {\n        d3.selectAll(\"g.node\").classed(\"searchHighlight\", d => {\n            var attrVal = d[attr];\n            if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                if (attr === \"dist\") {\n                    switch (condition) {\n                        case \"greaterEqual\":\n                            return attrVal >= +val;\n                        case \"lesserEqual\":\n                            return attrVal <= +val;\n                        default:\n                            return;\n                    }\n                } else if (attr === \"name\" || attr === \"annotation\") {\n                    return attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n                }\n            }\n        });\n    }\n});\n\nexport default {\n    PhylovizView: PhylovizView\n};\n"]}