{"version":3,"sources":["viz/visualization.js"],"names":["_","CustomToJSON","toJSON","self","json","each","constructor","to_json_keys","val","get","k","to_json_mappers","select_datasets","filters","success_fn","history_grid","GridView","url_base","Galaxy","root","embedded","library_grid","tabs","Tabs","View","add","id","title","$el","$","append","modal","show","body","closing_events","buttons","Cancel","hide","Add","requests","window","console","log","length","ajax","url","dataType","data","data_type","hda_ldda","current","when","apply","then","track_defs","arguments","Array","map","arg","CanvasManager","default_font","undefined","dummy_canvas","new_canvas","dummy_context","getContext","font","char_width_px","measureText","width","patterns","load_pattern","extend","prototype","key","path","image","Image","src","onload","createPattern","get_pattern","canvas","manager","Cache","Backbone","Model","defaults","num_elements","obj_cache","key_ary","initialize","options","clear","get_elt","attributes","key_str","toString","index","indexOf","stale","splice","move_key_to_end","set_elt","value","deleted_key","shift","push","size","most_recently_added","GenomeDataManager","dataset","genome","init_data","min_region_size","filters_manager","data_mode_compatible","entry","mode","can_subset","call","initial_entries","add_data","entries","set","set_data","region","data_is_ready","ready_deferred","Deferred","query_type","ss_deferred","util_mod","ServerStateDeferred","ajax_settings","interval","response","go","resolve","search_features","query","params","getJSON","load_data","resolution","extra_params","chrom","low","high","filter_names","i","name","filter_cols","JSON","stringify","result","get_data","is_deferred","entry_region","is_subregion","contains","subset_entry","copy","last_request","trim","DEEP_DATA_REQ","BROAD_DATA_REQ","get_more_data","req_type","cur_data","_mark_stale","query_low","start_val","max_high","query_region","data_manager","new_data_request","new_data_available","concat","max_low","message","replace","can_get_more_detailed_data","dataset_type","get_more_detailed_data","detail_multiplier","num_samples","get_genome_wide_data","all_data_available","gw_data","chrom_info","chrom_data","GenomeRegion","start","end","len","deferred","genome_wide_data","subregion","subset_fns","bigwig","filter","data_point","refseq","seq_start","slice","subregion_data","same","GenomeReferenceDataManager","dataset_placeholder","urlRoot","data_url","Genome","chroms_info","dbkey","get_chroms_info","get_chrom_region","chr_name","find","get_chrom_len","str_val","from_str","pieces","split","start_end","parseInt","on","compute_overlap","a_region","first_chrom","second_chrom","first_start","second_start","first_end","second_end","overlap","overlap_results","DIF_CHROMS","BEFORE","OVERLAP_START","CONTAINS","AFTER","CONTAINED_BY","OVERLAP_END","chrom_len","overlaps","intersection","GenomeRegionCollection","Collection","model","BrowserBookmark","note","BrowserBookmarkCollection","BackboneTrack","data_mod","Dataset","models","default_value","label","type","config_mod","ConfigSettingCollection","from_models_and_saved_values","prefs","preloaded_data","p","color","d","BackboneTrackCollection","Visualization","save","vis_json","GenomeVisualization","drawables","bookmarks","viewport","tracks","unset","add_tracks","view","dummy","obj_type","content_visible","TrackBrowserRouter","Router","route","navigate","new_loc","change_location","go_to"],"mappings":"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","file":"../../scripts/viz/visualization.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nimport data_mod from \"mvc/dataset/data\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\nimport GridView from \"mvc/grid/grid-view\";\nimport Tabs from \"mvc/ui/ui-tabs\";\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function() {\n        var self = this;\n        var json = {};\n        _.each(self.constructor.to_json_keys, k => {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = (filters, success_fn) => {\n    // history dataset selection tab\n    var history_grid = new GridView({\n        url_base: `${Galaxy.root}visualization/list_history_datasets`,\n        filters: filters,\n        embedded: true\n    });\n\n    // library dataset selection tab\n    var library_grid = new GridView({\n        url_base: `${Galaxy.root}visualization/list_library_datasets`,\n        embedded: true\n    });\n\n    // build tabs\n    var tabs = new Tabs.View();\n    tabs.add({\n        id: \"histories\",\n        title: _l(\"Histories\"),\n        $el: $(\"<div/>\").append(history_grid.$el)\n    });\n    tabs.add({\n        id: \"libraries\",\n        title: _l(\"Libraries\"),\n        $el: $(\"<div/>\").append(library_grid.$el)\n    });\n\n    // modal\n    Galaxy.modal.show({\n        title: _l(\"Select datasets for new tracks\"),\n        body: tabs.$el,\n        closing_events: true,\n        buttons: {\n            Cancel: function() {\n                Galaxy.modal.hide();\n            },\n            Add: function() {\n                var requests = [];\n                tabs.$(\"input.grid-row-select-checkbox[name=id]:checked\").each(function() {\n                    window.console.log($(this).val());\n                    requests[requests.length] = $.ajax({\n                        url: `${Galaxy.root}api/datasets/${$(this).val()}`,\n                        dataType: \"json\",\n                        data: {\n                            data_type: \"track_config\",\n                            hda_ldda: tabs.current() == \"histories\" ? \"hda\" : \"ldda\"\n                        }\n                    });\n                });\n                // To preserve order, wait until there are definitions for all tracks and then add\n                // them sequentially.\n                $.when.apply($, requests).then(function() {\n                    // jQuery always returns an Array for arguments, so need to look at first element\n                    // to determine whether multiple requests were made and consequently how to\n                    // map arguments to track definitions.\n                    var track_defs = arguments[0] instanceof Array ? $.map(arguments, arg => arg[0]) : [arguments[0]];\n                    success_fn(track_defs);\n                });\n                Galaxy.modal.hide();\n            }\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function(default_font) {\n    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext(\"2d\");\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern(\"right_strand\", \"/visualization/strand_right.png\");\n    this.load_pattern(\"left_strand\", \"/visualization/strand_left.png\");\n    this.load_pattern(\"right_strand_inv\", \"/visualization/strand_right_inv.png\");\n    this.load_pattern(\"left_strand_inv\", \"/visualization/strand_left_inv.png\");\n};\n\n_.extend(CanvasManager.prototype, {\n    load_pattern: function(key, path) {\n        var patterns = this.patterns;\n        var dummy_context = this.dummy_context;\n        var image = new Image();\n        image.src = `${Galaxy.root}static/images${path}`;\n        image.onload = () => {\n            patterns[key] = dummy_context.createPattern(image, \"repeat\");\n        };\n    },\n    get_pattern: function(key) {\n        return this.patterns[key];\n    },\n    new_canvas: function() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function(key) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n\n        var index = _.indexOf(key_ary, k => k.toString() === key_str);\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            } else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function(key, value) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n        var num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function() {\n        return this.size() === 0\n            ? null\n            : // Most recent key is at the end of key array.\n              this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function(entry, mode) {\n            return true;\n        },\n        can_subset: function(entry) {\n            return false;\n        }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get(\"init_data\");\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get(\"num_elements\") < entries.length) {\n            this.set(\"num_elements\", entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, entry => {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function() {\n        var dataset = this.get(\"dataset\");\n        var ready_deferred = $.Deferred();\n\n        var // If requesting raw data, query dataset state; if requesting (converted) data,\n        // need to query converted datasets state.\n        query_type =\n            this.get(\"data_type\") === \"raw_data\"\n                ? \"state\"\n                : this.get(\"data_type\") === \"data\"\n                    ? \"converted_datasets_state\"\n                    : \"error\";\n\n        var ss_deferred = new util_mod.ServerStateDeferred({\n            ajax_settings: {\n                url: this.get(\"dataset\").url(),\n                data: {\n                    hda_ldda: dataset.get(\"hda_ldda\"),\n                    data_type: query_type\n                },\n                dataType: \"json\"\n            },\n            interval: 5000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        $.when(ss_deferred.go()).then(response => {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\");\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function(query) {\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            query: query,\n            hda_ldda: dataset.get(\"hda_ldda\"),\n            data_type: \"features\"\n        };\n\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            data_type: this.get(\"data_type\"),\n            chrom: region.get(\"chrom\"),\n            low: region.get(\"start\"),\n            high: region.get(\"end\"),\n            mode: mode,\n            resolution: resolution,\n            hda_ldda: dataset.get(\"hda_ldda\")\n        };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get(\"filters_manager\");\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this;\n\n        var entry = $.getJSON(dataset.url(), params, result => {\n            // Add region to the result.\n            result.region = region;\n            manager.set_data(region, result);\n        });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if (entry && (util_mod.is_deferred(entry) || this.get(\"data_mode_compatible\")(entry, mode))) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get(\"key_ary\");\n\n        var obj_cache = this.get(\"obj_cache\");\n        var entry_region;\n        var is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if (\n                    util_mod.is_deferred(entry) ||\n                    (this.get(\"data_mode_compatible\")(entry, mode) && this.get(\"can_subset\")(entry))\n                ) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if (!util_mod.is_deferred(entry)) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (!last_request || region.get(\"start\") > last_request.get(\"start\")) {\n                // This request is after the last request, so extend right.\n                region.set(\"end\", region.get(\"start\") + this.attributes.min_region_size);\n            } else {\n                // This request is after the last request, so extend left.\n                region.set(\"start\", region.get(\"end\") - this.attributes.min_region_size);\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set(\"genome\", this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get(\"data_mode_compatible\")(cur_data, mode))) {\n            console.log(\"ERROR: problem with getting more data: current data is not compatible\");\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get(\"start\");\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {\n                start_val: cur_data.data.length + 1\n            });\n        } else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set(\"start\", query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this;\n\n        var new_data_request = this.load_data(query_region, mode, resolution, extra_params);\n\n        var new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(result => {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return cur_data.dataset_type === \"bigwig\" && cur_data.data.length < 8000;\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function(region, mode, resolution, detail_multiplier, extra_params) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) {\n            extra_params = {};\n        }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === \"bigwig\") {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\"ERROR: no data to mark as stale: \", this.get(\"dataset\"), region.toString());\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function(genome) {\n        // -- Get all data. --\n\n        var self = this;\n\n        var all_data_available = true;\n\n        var //  Map chromosome info into genome data.\n        gw_data = _.map(genome.get(\"chroms_info\").chrom_info, chrom_info => {\n            var chrom_data = self.get_elt(\n                new GenomeRegion({\n                    chrom: chrom_info.chrom,\n                    start: 0,\n                    end: chrom_info.len\n                })\n            );\n\n            // Set flag if data is not available.\n            if (!chrom_data) {\n                all_data_available = false;\n            }\n\n            return chrom_data;\n        });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(this.get(\"dataset\").url(), { data_type: \"genome_data\" }, genome_wide_data => {\n            self.add_data(genome_wide_data.data);\n            deferred.resolve(genome_wide_data.data);\n        });\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function(data, subregion) {\n                return _.filter(\n                    data,\n                    data_point => data_point[0] >= subregion.get(\"start\") && data_point[0] <= subregion.get(\"end\")\n                );\n            },\n            refseq: function(data, subregion) {\n                var seq_start = subregion.get(\"start\") - entry.region.get(\"start\");\n                return entry.data.slice(seq_start, seq_start + subregion.length());\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set(\"dataset\", dataset_placeholder);\n    },\n\n    load_data: function(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return region.length() <= 100000\n            ? GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params)\n            : { data: null, region: region };\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), chrom_info => chrom_info.chrom === chr_name);\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), chrom_info => chrom_info.chrom === chr_name).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend(\n    {\n        defaults: {\n            chrom: null,\n            start: 0,\n            end: 0,\n            str_val: null,\n            genome: null\n        },\n\n        /**\n         * Returns true if this region is the same as a given region.\n         * It does not test the genome right now.\n         */\n        same: function(region) {\n            return (\n                this.attributes.chrom === region.get(\"chrom\") &&\n                this.attributes.start === region.get(\"start\") &&\n                this.attributes.end === region.get(\"end\")\n            );\n        },\n\n        /**\n         * If from_str specified, use it to initialize attributes.\n         */\n        initialize: function(options) {\n            if (options.from_str) {\n                var pieces = options.from_str.split(\":\");\n                var chrom = pieces[0];\n                var start_end = pieces[1].split(\"-\");\n                this.set({\n                    chrom: chrom,\n                    start: parseInt(start_end[0], 10),\n                    end: parseInt(start_end[1], 10)\n                });\n            }\n\n            // Keep a copy of region's string value for fast lookup.\n            this.attributes.str_val = `${this.get(\"chrom\")}:${this.get(\"start\")}-${this.get(\"end\")}`;\n\n            // Set str_val on attribute change.\n            this.on(\n                \"change\",\n                function() {\n                    this.attributes.str_val = `${this.get(\"chrom\")}:${this.get(\"start\")}-${this.get(\"end\")}`;\n                },\n                this\n            );\n        },\n\n        copy: function() {\n            return new GenomeRegion({\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            });\n        },\n\n        length: function() {\n            return this.get(\"end\") - this.get(\"start\");\n        },\n\n        /** Returns region in canonical form chrom:start-end */\n        toString: function() {\n            return this.attributes.str_val;\n        },\n\n        toJSON: function() {\n            return {\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            };\n        },\n\n        /**\n         * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n         * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n         */\n        compute_overlap: function(a_region) {\n            var first_chrom = this.get(\"chrom\");\n            var second_chrom = a_region.get(\"chrom\");\n            var first_start = this.get(\"start\");\n            var second_start = a_region.get(\"start\");\n            var first_end = this.get(\"end\");\n            var second_end = a_region.get(\"end\");\n            var overlap;\n\n            // Compare chroms.\n            if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n                return GenomeRegion.overlap_results.DIF_CHROMS;\n            }\n\n            // Compare regions.\n            if (first_start < second_start) {\n                if (first_end < second_start) {\n                    overlap = GenomeRegion.overlap_results.BEFORE;\n                } else if (first_end < second_end) {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_START;\n                } else {\n                    // first_end >= second_end\n                    overlap = GenomeRegion.overlap_results.CONTAINS;\n                }\n            } else if (first_start > second_start) {\n                if (first_start > second_end) {\n                    overlap = GenomeRegion.overlap_results.AFTER;\n                } else if (first_end <= second_end) {\n                    overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n                } else {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_END;\n                }\n            } else {\n                // first_start === second_start\n                overlap =\n                    first_end >= second_end\n                        ? GenomeRegion.overlap_results.CONTAINS\n                        : GenomeRegion.overlap_results.CONTAINED_BY;\n            }\n\n            return overlap;\n        },\n\n        /**\n         * Trim a region to match genome's constraints.\n         */\n        trim: function(genome) {\n            // Assume that all chromosome/contigs start at 0.\n            if (this.attributes.start < 0) {\n                this.attributes.start = 0;\n            }\n\n            // Only try to trim the end if genome is set.\n            if (this.attributes.genome) {\n                var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n                if (this.attributes.end > chrom_len) {\n                    this.attributes.end = chrom_len - 1;\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Returns true if this region contains a given region.\n         */\n        contains: function(a_region) {\n            return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n        },\n\n        /**\n         * Returns true if regions overlap.\n         */\n        overlaps: function(a_region) {\n            return (\n                _.intersection(\n                    [this.compute_overlap(a_region)],\n                    [\n                        GenomeRegion.overlap_results.DIF_CHROMS,\n                        GenomeRegion.overlap_results.BEFORE,\n                        GenomeRegion.overlap_results.AFTER\n                    ]\n                ).length === 0\n            );\n        }\n    },\n    {\n        overlap_results: {\n            DIF_CHROMS: 1000,\n            BEFORE: 1001,\n            CONTAINS: 1002,\n            OVERLAP_START: 1003,\n            OVERLAP_END: 1004,\n            CONTAINED_BY: 1005,\n            AFTER: 1006\n        }\n    }\n);\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: \"\"\n    },\n\n    initialize: function(options) {\n        this.set(\"region\", new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend(\n    {\n        defaults: {\n            mode: \"Auto\"\n        },\n\n        initialize: function(options) {\n            this.set(\"dataset\", new data_mod.Dataset(options.dataset));\n\n            // -- Set up config settings. --\n            var models = [\n                {\n                    key: \"name\",\n                    default_value: this.get(\"dataset\").get(\"name\")\n                },\n                { key: \"color\" },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: 0\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: 1\n                }\n            ];\n\n            this.set(\"config\", config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n            // -- Set up data manager. --\n            var preloaded_data = this.get(\"preloaded_data\");\n            if (preloaded_data) {\n                preloaded_data = preloaded_data.data;\n            } else {\n                preloaded_data = [];\n            }\n            this.set(\n                \"data_manager\",\n                new GenomeDataManager({\n                    dataset: this.get(\"dataset\"),\n                    init_data: preloaded_data\n                })\n            );\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\"track_type\", \"dataset\", \"prefs\", \"mode\", \"filters\", \"tool_state\"],\n        to_json_mappers: {\n            prefs: function(p, self) {\n                if (_.size(p) === 0) {\n                    p = {\n                        name: self\n                            .get(\"config\")\n                            .get(\"name\")\n                            .get(\"value\"),\n                        color: self\n                            .get(\"config\")\n                            .get(\"color\")\n                            .get(\"value\")\n                    };\n                }\n                return p;\n            },\n            dataset: function(d) {\n                return {\n                    id: d.id,\n                    hda_ldda: d.get(\"hda_ldda\")\n                };\n            }\n        }\n    }\n);\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        type: \"\"\n    },\n\n    urlRoot: `${Galaxy.root}api/visualizations`,\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend(\n    {\n        defaults: _.extend({}, Visualization.prototype.defaults, {\n            dbkey: \"\",\n            drawables: null,\n            bookmarks: null,\n            viewport: null\n        }),\n\n        initialize: function(options) {\n            // Replace drawables with tracks.\n            this.set(\"drawables\", new BackboneTrackCollection(options.tracks));\n\n            var models = [];\n            this.set(\"config\", config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n            // Clear track and data definitions to avoid storing large objects.\n            this.unset(\"tracks\");\n            this.get(\"drawables\").each(d => {\n                d.unset(\"preloaded_data\");\n            });\n        },\n\n        /**\n         * Add a track or array of tracks to the visualization.\n         */\n        add_tracks: function(tracks) {\n            this.get(\"drawables\").add(tracks);\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\"view\", \"viewport\", \"bookmarks\"],\n\n        to_json_mappers: {\n            view: function(dummy, self) {\n                return {\n                    obj_type: \"View\",\n                    prefs: {\n                        name: self.get(\"title\"),\n                        content_visible: true\n                    },\n                    drawables: self.get(\"drawables\")\n                };\n            }\n        }\n    }\n);\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, \"change_location\");\n        this.route(/([\\w+]+:[\\d,]+-[\\d,]+)$/, \"change_location\");\n\n        // Handle navigate events from view.\n        this.view.on(\"navigate\", new_loc => {\n            this.navigate(new_loc);\n        });\n    },\n\n    change_location: function(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nexport default {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n"]}